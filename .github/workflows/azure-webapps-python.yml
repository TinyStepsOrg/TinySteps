# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples


# Este workflow construye y despliega una aplicación Python en Azure Web App cuando se realiza un push a la rama principal.

# name: Build and deploy Python app to Azure Web App  # Nombre del workflow

# env:
#   AZURE_WEBAPP_NAME: your-app-name  # Nombre de la aplicación web en Azure
#   PYTHON_VERSION: '3.8'  # Versión de Python que se usará

# on:
#   push:
#     branches: [ "master" ]  # Ejecuta el workflow cuando hay un push a la rama master
#   workflow_dispatch:  # Permite ejecutar el workflow manualmente desde GitHub Actions

# permissions:
#   contents: read  # Otorga permisos de solo lectura a los contenidos del repositorio

# jobs:
#   build:  # Definición del job de construcción
#     runs-on: ubuntu-latest  # Ejecuta el job en un runner de Ubuntu

#     steps:
#       - uses: actions/checkout@v4  # Clona el código del repositorio en el runner

#       - name: Set up Python version  # Configura la versión de Python
#         uses: actions/setup-python@v3.0.0  # Usa la acción de GitHub para configurar Python
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}  # Usa la versión definida en las variables de entorno
#           cache: 'pip'  # Habilita la caché de paquetes de pip

#       - name: Create and start virtual environment  # Crea y activa un entorno virtual de Python
#         run: |
#           python -m venv venv  # Crea el entorno virtual
#           source venv/bin/activate  # Activa el entorno virtual

#       - name: Install dependencies  # Instala las dependencias del proyecto
#         run: pip install -r requirements.txt  # Instala las librerías definidas en requirements.txt

#       # Opcional: Se puede agregar aquí un paso para ejecutar pruebas (PyTest, Django test suites, etc.)

#       - name: Upload artifact for deployment jobs  # Sube los archivos necesarios para el despliegue como artefacto
#         uses: actions/upload-artifact@v4  # Usa la acción de GitHub para subir artefactos
#         with:
#           name: python-app  # Nombre del artefacto
#           path: |
#             .  # Sube todos los archivos del directorio actual
#             !venv/  # Excluye la carpeta del entorno virtual para evitar archivos innecesarios

#   deploy:  # Definición del job de despliegue
#     permissions:
#       contents: none  # No requiere permisos de acceso a los contenidos del repositorio
#     runs-on: ubuntu-latest  # Ejecuta el job en un runner de Ubuntu
#     needs: build  # Este job depende del job de construcción (se ejecuta después)
#     environment:
#       name: 'Development'  # Define el entorno de despliegue como "Development"
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}  # Obtiene la URL de la aplicación desplegada

#     steps:
#       - name: Download artifact from build job  # Descarga el artefacto generado en el job de construcción
#         uses: actions/download-artifact@v4  # Usa la acción de GitHub para descargar artefactos
#         with:
#           name: python-app  # Nombre del artefacto a descargar
#           path: .  # Descarga los archivos en el directorio actual

#       - name: 'Deploy to Azure Web App'  # Despliega la aplicación en Azure Web App
#         id: deploy-to-webapp  # Identificador del paso
#         uses: azure/webapps-deploy@v2  # Usa la acción de GitHub para desplegar en Azure
#         with:
#           app-name: ${{ env.AZURE_WEBAPP_NAME }}  # Usa el nombre de la aplicación definido en las variables de entorno
#           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}  # Usa las credenciales almacenadas como secreto en GitHub
